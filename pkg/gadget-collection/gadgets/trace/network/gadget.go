// Copyright 2019-2022 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package networkgraph

import (
	"fmt"
	"sync"
	"time"

	log "github.com/sirupsen/logrus"
	"sigs.k8s.io/controller-runtime/pkg/client"

	gadgetv1alpha1 "github.com/inspektor-gadget/inspektor-gadget/pkg/apis/gadget/v1alpha1"
	containercollection "github.com/inspektor-gadget/inspektor-gadget/pkg/container-collection"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/container-collection/networktracer"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-collection/gadgets"
	netTracer "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/network/tracer"
	netTypes "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/network/types"
	eventtypes "github.com/inspektor-gadget/inspektor-gadget/pkg/types"
)

type Trace struct {
	helpers gadgets.GadgetHelpers
	client  client.Client

	started bool
	done    chan bool

	tracer   *netTracer.Tracer
	conn     *networktracer.ConnectionToContainerCollection
	enricher *Enricher
	wg       sync.WaitGroup
}

type TraceFactory struct {
	gadgets.BaseFactory
}

func NewFactory() gadgets.TraceFactory {
	return &TraceFactory{
		BaseFactory: gadgets.BaseFactory{DeleteTrace: deleteTrace},
	}
}

func (f *TraceFactory) Description() string {
	return `The network-graph gadget monitors the network activity in the specified pods and records the list of TCP connections and UDP streams.`
}

func (f *TraceFactory) OutputModesSupported() map[gadgetv1alpha1.TraceOutputMode]struct{} {
	return map[gadgetv1alpha1.TraceOutputMode]struct{}{
		gadgetv1alpha1.TraceOutputModeStream: {},
	}
}

func deleteTrace(name string, t interface{}) {
	trace := t.(*Trace)
	if trace.started {
		trace.stop()
	}
}

func (f *TraceFactory) Operations() map[gadgetv1alpha1.Operation]gadgets.TraceOperation {
	n := func() interface{} {
		return &Trace{
			client:  f.Client,
			helpers: f.Helpers,
		}
	}

	return map[gadgetv1alpha1.Operation]gadgets.TraceOperation{
		gadgetv1alpha1.OperationStart: {
			Doc: "Start network-graph",
			Operation: func(name string, trace *gadgetv1alpha1.Trace) {
				f.LookupOrCreate(name, n).(*Trace).Start(trace)
			},
		},
		gadgetv1alpha1.OperationStop: {
			Doc: "Stop network-graph",
			Operation: func(name string, trace *gadgetv1alpha1.Trace) {
				f.LookupOrCreate(name, n).(*Trace).Stop(trace)
			},
		},
	}
}

func (t *Trace) publishEvent(
	trace *gadgetv1alpha1.Trace,
	event *netTypes.Event,
) {
	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
	t.helpers.PublishEvent(
		traceName,
		eventtypes.EventString(event),
	)
}

func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
	if t.started {
		trace.Status.State = gadgetv1alpha1.TraceStateStarted
		return
	}

	var err error
	t.enricher, err = NewEnricher()
	if err != nil {
		trace.Status.OperationError = fmt.Sprintf("Failed to start network-graph enricher: %s", err)
		return
	}
	t.tracer, err = netTracer.NewTracer(t.helpers)
	if err != nil {
		trace.Status.OperationError = fmt.Sprintf("Failed to start network-graph tracer: %s", err)
		return
	}

	// This callback is used by the ConnectionToContainerCollection to notify
	// when containers are attached and detached, or any error during that
	// operations. The actual events generated by the tracer will be retrieved
	// using the Pop() method.
	eventCallback := func(container *containercollection.Container, event netTypes.Event) {
		// Enrich notifications with data from container
		event.Node = trace.Spec.Node
		event.Namespace = container.Namespace
		event.Pod = container.Podname
		event.Container = container.Name

		t.publishEvent(trace, &event)
	}

	config := &networktracer.ConnectToContainerCollectionConfig[netTypes.Event]{
		Tracer:        t.tracer,
		Resolver:      t.helpers,
		Selector:      *gadgets.ContainerSelectorFromContainerFilter(trace.Spec.Filter),
		EventCallback: eventCallback,
		Base:          netTypes.Base,
	}
	t.conn, err = networktracer.ConnectToContainerCollection(config)
	if err != nil {
		trace.Status.OperationError = fmt.Sprintf("Failed to start network-graph tracer: %s", err)
		return
	}

	t.started = true
	trace.Status.State = gadgetv1alpha1.TraceStateStarted

	t.done = make(chan bool)
	t.wg.Add(1)
	go t.run(trace)
}

func (t *Trace) run(trace *gadgetv1alpha1.Trace) {
	defer t.wg.Done()
	ticker := time.NewTicker(time.Second)
	for {
		select {
		case <-t.done:
			ticker.Stop()
			return
		case <-ticker.C:
			if !t.update(trace) {
				return
			}
		}
	}
}

func (t *Trace) update(trace *gadgetv1alpha1.Trace) bool {
	if t.tracer == nil {
		// This should not happen with t.wg
		msg := fmt.Sprint("tracer is nil at tick")
		log.Error(msg)
		event := netTypes.Base(eventtypes.Err(msg))
		t.publishEvent(trace, &event)
		return false
	}
	newEvents, err := t.tracer.Pop()
	if err != nil {
		msg := fmt.Sprintf("failed to read BPF map: %s", err)
		log.Error(msg)
		event := netTypes.Base(eventtypes.Err(msg))
		t.publishEvent(trace, &event)
		return false
	}
	t.enricher.Enrich(newEvents)

	for _, event := range newEvents {
		// for now, ignore events on the host netns
		if event.Pod != "" {
			t.publishEvent(trace, event)
		}
	}
	return true
}

func (t *Trace) Stop(trace *gadgetv1alpha1.Trace) {
	if !t.started {
		trace.Status.OperationError = "Not started"
		return
	}

	t.stop()
	trace.Status.State = gadgetv1alpha1.TraceStateStopped
}

func (t *Trace) stop() {
	if t.conn != nil {
		t.conn.Close()
	}

	// tell run() to stop using t.tracer
	t.done <- true
	// wait for run() to end before closing t.tracer and t.enricher
	t.wg.Wait()

	t.tracer.Close()
	t.tracer = nil
	t.enricher.Close()
	t.enricher = nil
	t.started = false
}
