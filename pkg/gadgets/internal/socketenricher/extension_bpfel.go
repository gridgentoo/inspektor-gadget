// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package socketenricher

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type extensionSocketsKey struct {
	Netns uint32
	Proto uint16
	Port  uint16
}

type extensionSocketsValue struct {
	Mntns   uint64
	PidTgid uint64
	Task    [16]int8
}

// loadExtension returns the embedded CollectionSpec for extension.
func loadExtension() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExtensionBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load extension: %w", err)
	}

	return spec, err
}

// loadExtensionObjects loads extension and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*extensionObjects
//	*extensionPrograms
//	*extensionMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExtensionObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExtension()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// extensionSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type extensionSpecs struct {
	extensionProgramSpecs
	extensionMapSpecs
}

// extensionSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type extensionProgramSpecs struct {
	GadgetSkbGetComm1   *ebpf.ProgramSpec `ebpf:"gadget_skb_get_comm1"`
	GadgetSkbGetComm2   *ebpf.ProgramSpec `ebpf:"gadget_skb_get_comm2"`
	GadgetSkbGetMntns   *ebpf.ProgramSpec `ebpf:"gadget_skb_get_mntns"`
	GadgetSkbGetPidTgid *ebpf.ProgramSpec `ebpf:"gadget_skb_get_pid_tgid"`
}

// extensionMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type extensionMapSpecs struct {
	Sockets *ebpf.MapSpec `ebpf:"sockets"`
}

// extensionObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExtensionObjects or ebpf.CollectionSpec.LoadAndAssign.
type extensionObjects struct {
	extensionPrograms
	extensionMaps
}

func (o *extensionObjects) Close() error {
	return _ExtensionClose(
		&o.extensionPrograms,
		&o.extensionMaps,
	)
}

// extensionMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExtensionObjects or ebpf.CollectionSpec.LoadAndAssign.
type extensionMaps struct {
	Sockets *ebpf.Map `ebpf:"sockets"`
}

func (m *extensionMaps) Close() error {
	return _ExtensionClose(
		m.Sockets,
	)
}

// extensionPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExtensionObjects or ebpf.CollectionSpec.LoadAndAssign.
type extensionPrograms struct {
	GadgetSkbGetComm1   *ebpf.Program `ebpf:"gadget_skb_get_comm1"`
	GadgetSkbGetComm2   *ebpf.Program `ebpf:"gadget_skb_get_comm2"`
	GadgetSkbGetMntns   *ebpf.Program `ebpf:"gadget_skb_get_mntns"`
	GadgetSkbGetPidTgid *ebpf.Program `ebpf:"gadget_skb_get_pid_tgid"`
}

func (p *extensionPrograms) Close() error {
	return _ExtensionClose(
		p.GadgetSkbGetComm1,
		p.GadgetSkbGetComm2,
		p.GadgetSkbGetMntns,
		p.GadgetSkbGetPidTgid,
	)
}

func _ExtensionClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed extension_bpfel.o
var _ExtensionBytes []byte
